Our most significant change was renaming "findAllTargets" to "CalcTargetsRecursive". 
FindAllTargets was the recursive part of our target algorithm, and calcTargets was the initial setup.
Changing the name made the difference between the two functions clear, and our code easier to understand.

Before: ------------------------------------------------------------------------
public void calcTargets(BoardCell startCell, int pathLength) {
	    targets.clear();  // Important to clear targets before each calculation
	    visited.clear();  // Clear visited set for fresh calculation
	    visited.add(startCell);
	    findAllTargets(startCell, pathLength);
	}

	private void findAllTargets(BoardCell currentCell, int stepsRemaining) {
		
	    for (BoardCell adjCell : currentCell.getAdjList()) {
	        if (visited.contains(adjCell) || (adjCell.getOccupied() && !adjCell.isRoomCenter())) {
	            continue; // Skip visited cells or occupied cells unless they're room centers
	        }
	        visited.add(adjCell);
	        if (stepsRemaining == 1 || adjCell.isRoomCenter()) {
	            targets.add(adjCell);
	        } else {
	            findAllTargets(adjCell, stepsRemaining - 1);
	        }
	        visited.remove(adjCell);  // Important for backtracking
	    }
	}
	
After: ------------------------------------------------------------------------
	public void calcTargets(BoardCell startCell, int pathLength) {
	    targets.clear();  // Important to clear targets before each calculation
	    visited.clear();  // Clear visited set for fresh calculation
	    visited.add(startCell);
	    calcTargetsRecursive(startCell, pathLength);
	}

	private void calcTargetsRecursive(BoardCell currentCell, int stepsRemaining) {
		
	    for (BoardCell adjCell : currentCell.getAdjList()) {
	        if (visited.contains(adjCell) || (adjCell.getOccupied() && !adjCell.isRoomCenter())) {
	            continue; // Skip visited cells or occupied cells unless they're room centers
	        }
	        visited.add(adjCell);
	        if (stepsRemaining == 1 || adjCell.isRoomCenter()) {
	            targets.add(adjCell);
	        } else {
	            calcTargetsRecursive(adjCell, stepsRemaining - 1);
	        }
	        visited.remove(adjCell);  // Important for backtracking
	    }
	}